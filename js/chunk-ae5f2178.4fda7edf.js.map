{"version":3,"sources":["webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///./node_modules/core-js/modules/es.string.ends-with.js","webpack:///../../../src/mixins/rippleable/index.ts","webpack:///../../../src/mixins/selectable/index.ts","webpack:///../../../src/components/VCheckbox/VCheckbox.ts"],"names":["defaultMenuProps","offsetY","offsetOverflow","transition","VSelect","name","props","allowOverflow","type","default","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","data","lazySearch","this","computed","classes","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","value","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","watch","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","created","destroyed","methods","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","VTextField","mergeData","attrs","autocomplete","domProps","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","e","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event","delimiters","returnObject","editingIndex","computedCounterValue","$slots","delimiter","d","genChipSelection","chip","dblclick","onChipInput","onEnterDown","getMenuIndex","selectionStart","toLocaleLowerCase","includes","setValue","updateEditing","index","findIndex","Object","updateCombobox","isUsingSlot","Boolean","$scopedSlots","updateTags","menuIndex","itemToSelect","onPaste","pastedItemText","findExistingIndex","$","getOwnPropertyDescriptor","f","toLength","toString","notARegExp","requireObjectCoercible","correctIsRegExpLogic","IS_PURE","$endsWith","endsWith","min","Math","CORRECT_IS_REGEXP_LOGIC","MDN_POLYFILL_BUG","descriptor","prototype","writable","proto","forced","searchString","that","endPosition","arguments","undefined","len","end","search","call","slice","directives","ripple","genRipple","center","$createElement","mixins","model","prop","id","inputValue","falseValue","trueValue","label","hasColor","lazyValue","computedColor","isDark","isMultiple","Array","isActive","rippleState","genLabel","VInput","click","prevent","disabled","role","checked","on","blur","change","focus","keydown","ref","onBlur","onChange","onFocus","onKeydown","indeterminate","indeterminateIcon","offIcon","onIcon","inputIndeterminate","computedIcon","validationState","isDisabled","hasError","genCheckbox","checkboxAttrs","staticClass","VIcon","setTextColor","dense","dark","light","genDefaultSlot"],"mappings":"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","file":"js/chunk-ae5f2178.4fda7edf.js","sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      const index = this.selectedItems.findIndex(item =>\n        this.getText(item) === this.internalSearch)\n\n      // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n      if (index > -1) {\n        const item = typeof value[index] === 'object'\n          ? Object.assign({}, value[index])\n          : value[index]\n\n        value.splice(index, 1)\n        value.push(item)\n      } else {\n        value[this.editingIndex] = this.internalSearch\n      }\n\n      this.setValue(value)\n      this.editingIndex = -1\n      this.internalSearch = null\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\n// eslint-disable-next-line es/no-string-prototype-endswith -- safe\nvar $endsWith = ''.endsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.endsWith` method\n// https://tc39.es/ecma262/#sec-string.prototype.endswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = toString(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : min(toLength(endPosition), len);\n    var search = toString(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","// Directives\nimport ripple from '../../directives/ripple'\n\n// Types\nimport Vue, { VNode, VNodeData, VNodeDirective } from 'vue'\n\nexport default Vue.extend({\n  name: 'rippleable',\n\n  directives: { ripple },\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  methods: {\n    genRipple (data: VNodeData = {}): VNode | null {\n      if (!this.ripple) return null\n\n      data.staticClass = 'v-input--selection-controls__ripple'\n\n      data.directives = data.directives || []\n      data.directives.push({\n        name: 'ripple',\n        value: { center: true },\n      } as VNodeDirective)\n\n      return this.$createElement('div', data)\n    },\n  },\n})\n","// Components\nimport VInput from '../../components/VInput'\n\n// Mixins\nimport Rippleable from '../rippleable'\nimport Comparable from '../comparable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\nexport function prevent (e: Event) {\n  e.preventDefault()\n}\n\n/* @vue/component */\nexport default mixins(\n  VInput,\n  Rippleable,\n  Comparable\n).extend({\n  name: 'selectable',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change',\n  },\n\n  props: {\n    id: String,\n    inputValue: null as any,\n    falseValue: null as any,\n    trueValue: null as any,\n    multiple: {\n      type: Boolean,\n      default: null,\n    },\n    label: String,\n  },\n\n  data () {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (!this.isActive) return undefined\n      if (this.color) return this.color\n      if (this.isDark && !this.appIsDark) return 'white'\n      return 'primary'\n    },\n    isMultiple (): boolean {\n      return this.multiple === true || (this.multiple === null && Array.isArray(this.internalValue))\n    },\n    isActive (): boolean {\n      const value = this.value\n      const input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false\n\n        return input.some(item => this.valueComparator(item, value))\n      }\n\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value\n          ? this.valueComparator(value, input)\n          : Boolean(input)\n      }\n\n      return this.valueComparator(input, this.trueValue)\n    },\n    isDirty (): boolean {\n      return this.isActive\n    },\n    rippleState (): string | undefined {\n      return !this.isDisabled && !this.validationState\n        ? undefined\n        : this.validationState\n    },\n  },\n\n  watch: {\n    inputValue (val) {\n      this.lazyValue = val\n      this.hasColor = val\n    },\n  },\n\n  methods: {\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label!.data!.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent,\n      }\n\n      return label\n    },\n    genInput (type: string, attrs: object) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type,\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive,\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent,\n        },\n        ref: 'input',\n      })\n    },\n    onBlur () {\n      this.isFocused = false\n    },\n    onClick (e: Event) {\n      this.onChange()\n      this.$emit('click', e)\n    },\n    onChange () {\n      if (!this.isInteractive) return\n\n      const value = this.value\n      let input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = []\n        }\n\n        const length = input.length\n\n        input = input.filter((item: any) => !this.valueComparator(item, value))\n\n        if (input.length === length) {\n          input.push(value)\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value\n      } else {\n        input = !input\n      }\n\n      this.validate(true, input)\n      this.internalValue = input\n      this.hasColor = input\n    },\n    onFocus () {\n      this.isFocused = true\n    },\n    /** @abstract */\n    onKeydown (e: Event) {},\n  },\n})\n","// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      const { title, ...checkboxAttrs } = this.attrs$\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...checkboxAttrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n"],"sourceRoot":""}